{
    "collab_server" : "",
    "contents" : "\n#Funcion que compara varios numeros trapezoidales segun el metodo seleccionado\nComparaNumeros=function(){\n  cat(paste(\"Introduce la cantidad de numeros difusos trapezoidales para hacer ranking\"))\n  cantidadNumeros<-scan(n=1)\n  #si hay una cantidad positiva\n  if(cantidadNumeros>0){\n    #inicialimos los vectores que usaremos para los parametros  a null\n    a=NULL\n    b=NULL\n    c=NULL\n    d=NULL\n\n    cat(paste(\"\\nCada numero difuso trapezoidal se introduce como (a,b,c,d), si es triangular, b=c\\n\"))\n\n    #introduce los numeros difusos\n    for(i in 1:cantidadNumeros){\n      cat(paste(\"\\nEl numero difuso trapezoidal\",i,\"es :\\n\"))#cada valor del numero difusos lo guardamos en un vector\n      num=scan(nmax=4)\n      #Comprobamos que los valores son correctos\n      if(num[1]<num[2] && num[2]<= num[3] && num[3] < num[4]){\n        a=c(a,num[1])#contiene todas las a de los numeros difusos\n        b=c(b,num[2])\n        c=c(c,num[3])\n        d=c(d,num[4])\n      }else{#si algun valor es incorrecto que pare de introducir numeros\n        cat(paste(\"valores incorrectos\"))\n        return(0)\n      }\n\n    }\n    #Siempre este activo hasta que el usuario lo detenga\n    while(TRUE){\n      indice=NULL\n      vectorConjunto=NULL\n      vectorCoincidencias=NULL\n      #elegir un metodo\n      cat(paste(\"\\nElige el metodo para realizar ranking:\n                1- metodo centroide Chu y Tsao\n                2- metodo centroide Wang\n                3- metodo coeficiente variacional proporcional\n                4- metodo coeficiente variacional uniforme\n                5- metodo distancia muestra p\n                6- metodo de la distancia Wang\n                7- metodo de la distancia Yaou y Wu\n                8- metodo de la magnitud\n                Para salir pulse cualquier otra tecla \"))\n      metodo<-scan(n=1)\n\n      #booleano usado por si usamos el metodo de los coeficientes de variacion\n      OrdenacionNormal=TRUE\n\n      #para el metodo seleccionado obtener el vector con los indices de los numeros trapezoidales\n      if(metodo ==1){#metodo del centroide Chu y Tsao\n        for(i in 1:cantidadNumeros){\n          indice=c(indice,CentroideChuYTsaoTrapezoidal(a[i],b[i],c[i],d[i]))\n        }\n\n      }else if(metodo == 2){#metodo del centroide Wang\n        for(i in 1:cantidadNumeros){\n          indice=c(indice,CentroideWangTrapezoidal(a[i],b[i],c[i],d[i]))\n        }\n\n      }else if(metodo == 3){#metodo coeficiente proporcional\n        for(i in 1:cantidadNumeros){\n          indice=c(indice,CVProporcionalTrapezoidal(a[i],b[i],c[i],d[i]))\n          #activamos el booleano\n          OrdenacionNormal=FALSE\n        }\n\n      }else if(metodo == 4){#metodo coeficiente uniforme\n        for(i in 1:cantidadNumeros){\n          indice=c(indice,CVUniformeTrapezoidal(a[i],b[i],c[i],d[i]))\n          #activamos el booleano\n          OrdenacionNormal=FALSE\n        }\n\n      }else if(metodo ==5){#metodo muestra p\n        cat(paste(\"Introduce el valor de p positivo\"))\n        p<-scan(n=1)\n        if(p>0){\n          for(i in 1:cantidadNumeros){\n            indice=c(indice,DistanciaMuestraPTrapezoidal(a[i],b[i],c[i],d[i],p))\n          }\n\n        }else{#valor incorrecto de p\n          cat(paste(\"valor de p incorrecto\"))\n        }\n      }else if(metodo == 6){#metodo de distancia de Wang\n        for(i in 1:cantidadNumeros){\n          indice=c(indice,DistanciaWangTrapezoidal(a[i],b[i],c[i],d[i]))\n        }\n\n      }else if(metodo == 7){#metodo distancia Yao y Wu\n        for(i in 1:cantidadNumeros){\n          indice=c(indice,DistanciaYaoYWuTrapezoidal(a[i],b[i],c[i],d[i]))\n        }\n\n      }else if(metodo == 8){#metodo magnitud\n        for(i in 1:cantidadNumeros){\n          indice=c(indice,MagnitudTrapezoidal(a[i],b[i],c[i],d[i]))\n        }\n      }else {\n        cat(paste(\"Saliendo......\"))\n        return(0)\n      }\n\n      cat(paste(\"\\n El valor del indice para cada numero\\n\"))\n      for(i in 1:cantidadNumeros){\n        cat(paste(i,\" = \",indice[i],\"\\n\"))\n      }\n\n      #ordenamos el vector de indices de menor a mayor los indices\n      indiceOrdenado = sort(indice)\n\n      #Obtengo el vector conjunto con los numeros difusos ordenados, teniendo en cuenta repeticiones\n      for(i in 1:cantidadNumeros){\n        #si los indice actual y anterior no coinciden busca la posicion\n        if(i>=2 && indiceOrdenado[i-1] != indiceOrdenado[i]){\n          for(t in 1:cantidadNumeros){\n            #busco la posicion que coincide y lo pongo en el vector la posicion\n            if(indiceOrdenado[i]==indice[t]){\n              vectorConjunto =c(vectorConjunto,t)\n\n            }\n          }\n\n        }else if(i==1){#para el primer caso, solo busco la posicion que coincide\n          for(t in 1:cantidadNumeros){\n            if(indiceOrdenado[i]==indice[t]){\n              vectorConjunto =c(vectorConjunto,t)\n\n            }\n          }\n\n        }else{#las posicion actual y anterior en el vector coinciden guardamos las posicion en el vector de coincidencias\n          vectorCoincidencias=c(vectorCoincidencias,i)\n        }\n      }#for\n\n\n\n      #Para imprimir, obtengo el orden y miramos el tipo de ordenacion\n      #Busco para cada posicion si está en el vector de coincidencias, de ser así esa posicion es con igual. Si no hay repetidos, directamente sacar el orden\n      if(OrdenacionNormal){\n        cat(paste(\"\\nLos numeros difusos ordenados son \\n\"))\n        for(i in 1:cantidadNumeros){\n          if(i==1){\n            cat(paste(vectorConjunto[i]))#imprimo el primero\n          }else{#para todas las posiciones menos la primera\n            aux=FALSE\n            #si hay coincidencias\n            if(length(vectorCoincidencias)!=0){\n              for(j in 1:length(vectorCoincidencias)){#busco si la posicion esta en coincidencias, por tanto el indice era el mismo\n                if(i == vectorCoincidencias[j]){\n                  aux=TRUE\n                }\n              }\n            }\n\n            if(aux){#si esa posicion era coincidencia imprimo con\n              cat(paste(\" = \",vectorConjunto[i]))\n            }else{\n              cat(paste(\" < \",vectorConjunto[i]))\n            }\n\n          }#else\n\n        }#for\n      }else{\n        cat(paste(\"\\nLos numeros difusos ordenados son \\n\"))\n        for(i in 1:cantidadNumeros){\n          if(i==1){\n            cat(paste(vectorConjunto[i]))#imprimo el primero\n          }else{#para todas las posiciones menos la primera\n            aux=FALSE\n            if(length(vectorCoincidencias)!=0){\n              for(j in 1:length(vectorCoincidencias)){#busco si la posicion esta en coincidencias, por tanto el indice era el mismo\n                if(i == vectorCoincidencias[j]){\n                  aux=TRUE\n                }\n              }\n            }\n            if(aux){#si esa posicion era coincidencia imprimo con =\n              cat(paste(\" = \",vectorConjunto[i]))\n            }else{\n              cat(paste(\" > \",vectorConjunto[i]))\n            }\n\n          }#else\n\n        }#for\n      }\n      cat(paste(\" \\n\"))\n\n    }\n\n\n\n  }else{#tiene que introducir al menos un numero\n    cat(paste(\"Tiene que introducir al menos un numero\"))\n  }\n\n}\n\n\n",
    "created" : 1497946847472.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2010353521",
    "id" : "FF058FE3",
    "lastKnownWriteTime" : 1497949574,
    "last_content_update" : 1497949574280,
    "path" : "C:/Users/Miguel/Dropbox/Mary/TFG/TFG Miguel/RankingFuzzyNumbers/R/ComparaNumeros.R",
    "project_path" : "R/ComparaNumeros.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}